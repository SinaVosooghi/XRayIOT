name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  NODE_VERSION: '22'
  YARN_VERSION: '4.9.4'

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
      - name: Install build tools
        run: sudo apt-get update && sudo apt-get install -y build-essential python3
        
      - name: Set MongoDB download env variables
        run: |
          echo "DOWNLOAD_DIR=/tmp/mongodb-binaries" >> $GITHUB_ENV
          echo "DOWNLOAD_MIRROR=fastdl.mongodb.org" >> $GITHUB_ENV
          echo "MONGODB_DOWNLOAD_DIR=/tmp/mongodb-binaries" >> $GITHUB_ENV
          
      - name: Clean yarn cache
        run: yarn cache clean
        
      - name: Install dependencies
        run: yarn install --immutable
        
      - name: Set up test environment
        run: |
          cp env.test.example .env.test
          echo "NODE_ENV=test" >> $GITHUB_ENV
        
      - name: Run linting
        run: yarn lint
        
      - name: Run type checking
        run: yarn type-check
        
      - name: Run unit tests
        run: |
          export $(grep -v '^#' .env.test | grep -v '^$' | xargs)
          yarn test
        
      - name: Run e2e tests
        run: yarn test:e2e
        
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
      - name: Install build tools
        run: sudo apt-get update && sudo apt-get install -y build-essential python3
        
      - name: Set MongoDB download env variables
        run: |
          echo "DOWNLOAD_DIR=/tmp/mongodb-binaries" >> $GITHUB_ENV
          echo "DOWNLOAD_MIRROR=fastdl.mongodb.org" >> $GITHUB_ENV
          echo "MONGODB_DOWNLOAD_DIR=/tmp/mongodb-binaries" >> $GITHUB_ENV
          
      - name: Clean yarn cache
        run: yarn cache clean
        
      - name: Install dependencies
        run: yarn install --immutable
        
      - name: Set up test environment
        run: |
          cp env.test.example .env.test
          echo "NODE_ENV=test" >> $GITHUB_ENV
        
      - name: Build project
        run: yarn build
        
      - name: Build Docker images
        run: |
          docker build -t xrayiot-api:latest ./apps/api
          docker build -t xrayiot-signals:latest ./apps/signals
          docker build -t xrayiot-producer:latest ./apps/producer
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            apps/*/dist/
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'xrayiot-api:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run npm audit
        run: |
          yarn audit --audit-level moderate
          
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, build]
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
          
      rabbitmq:
        image: rabbitmq:3.12-management
        env:
          RABBITMQ_DEFAULT_USER: admin
          RABBITMQ_DEFAULT_PASS: password
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
      - name: Install build tools
        run: sudo apt-get update && sudo apt-get install -y build-essential python3
        
      - name: Set MongoDB download env variables
        run: |
          echo "DOWNLOAD_DIR=/tmp/mongodb-binaries" >> $GITHUB_ENV
          echo "DOWNLOAD_MIRROR=fastdl.mongodb.org" >> $GITHUB_ENV
          echo "MONGODB_DOWNLOAD_DIR=/tmp/mongodb-binaries" >> $GITHUB_ENV
          
      - name: Clean yarn cache
        run: yarn cache clean
        
      - name: Install dependencies
        run: yarn install --immutable
        
      - name: Wait for services
        run: |
          echo "Waiting for MongoDB..."
          timeout 60 bash -c 'until echo "db.runCommand({ping: 1})" | mongosh --host localhost:27017 --username admin --password password --authenticationDatabase admin; do sleep 2; done'
          
          echo "Waiting for RabbitMQ..."
          timeout 60 bash -c 'until curl -u admin:password http://localhost:15672/api/overview; do sleep 2; done'
          
          echo "Waiting for Redis..."
          timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 2; done'
        
      - name: Build Docker images
        run: |
          docker build -t xrayiot-api:test ./apps/api
          docker build -t xrayiot-signals:test ./apps/signals
          docker build -t xrayiot-producer:test ./apps/producer
          
      - name: Start application containers
        run: |
          # Start API service
          docker run -d \
            --name api-test \
            --network host \
            --env-file .env.test \
            -p 3002:3000 \
            xrayiot-api:test
            
          # Start Signals service
          docker run -d \
            --name signals-test \
            --network host \
            --env-file .env.test \
            xrayiot-signals:test
            
          # Start Producer service
          docker run -d \
            --name producer-test \
            --network host \
            --env-file .env.test \
            -p 3003:3000 \
            xrayiot-producer:test
            
      - name: Wait for applications to start
        run: |
          echo "Waiting for API service..."
          timeout 60 bash -c 'until curl -f http://localhost:3002/health; do sleep 2; done'
          
          echo "Waiting for Producer service..."
          timeout 60 bash -c 'until curl -f http://localhost:3003/test/health; do sleep 2; done'
          
          echo "All services are ready!"
          
      - name: Run integration tests
        run: |
          export API_BASE_URL="http://localhost:3002"
          export PRODUCER_BASE_URL="http://localhost:3003"
          yarn test:integration
          
      - name: Run e2e tests
        run: |
          export API_BASE_URL="http://localhost:3002"
          export PRODUCER_BASE_URL="http://localhost:3003"
          yarn test:e2e
          
      - name: Cleanup containers
        if: always()
        run: |
          docker stop api-test signals-test producer-test || true
          docker rm api-test signals-test producer-test || true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security, integration]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # This could be deploying to a staging server, cloud environment, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security, integration]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here
          # This could be deploying to a production server, cloud environment, etc.

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [test, build, security, integration]
    if: always()
    
    steps:
      - name: Notify on failure
        if: failure()
        run: |
          echo "Pipeline failed! Notifying team..."
          # Add your notification logic here (Slack, email, etc.)
          
      - name: Notify on success
        if: success()
        run: |
          echo "Pipeline succeeded! Notifying team..."
          # Add your notification logic here (Slack, email, etc.)

