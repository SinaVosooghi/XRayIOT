name: CI/CD Pipeline (Optimized)

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

permissions:
  contents: read
  security-events: write

env:
  NODE_VERSION: '22'
  YARN_VERSION: '4.9.4'
  CACHE_VERSION: 'v1'

jobs:
  # Parallel job for linting and type checking (fastest)
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

          
      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.yarn/cache
            ~/.yarn/berry/cache
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-
            ${{ runner.os }}-yarn-
            
      - name: Install dependencies
        run: yarn install --immutable
        
      - name: Run linting
        run: yarn lint
        
      - name: Run type checking
        run: yarn type-check

  # Parallel job for unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

          
      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.yarn/cache
            ~/.yarn/berry/cache
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-
            ${{ runner.os }}-yarn-
            
      - name: Install dependencies
        run: yarn install --immutable
        
      - name: Set up test environment
        run: |
          cp env.test.example .env.test
          echo "NODE_ENV=test" >> $GITHUB_ENV
        
      - name: Run unit tests with coverage
        run: |
          export $(grep -v '^#' .env.test | grep -v '^$' | xargs)
          yarn test:coverage --maxWorkers=2 --detectOpenHandles --forceExit
        
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Parallel job for integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      rabbitmq:
        image: rabbitmq:3.12-management
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: admin
          RABBITMQ_DEFAULT_PASS: password
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

          
      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.yarn/cache
            ~/.yarn/berry/cache
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-
            ${{ runner.os }}-yarn-
            
      - name: Install dependencies
        run: yarn install --immutable
        
      - name: Set up test environment
        run: |
          cp env.test.example .env.test
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "MONGODB_URI=mongodb://localhost:27017/xrayiot_test" >> $GITHUB_ENV
          echo "RABBITMQ_URI=amqp://admin:password@localhost:5672" >> $GITHUB_ENV
          echo "REDIS_URI=redis://localhost:6379" >> $GITHUB_ENV
        
      - name: Wait for services
        run: |
          # Wait for MongoDB
          timeout 60 bash -c 'until nc -z localhost 27017; do sleep 1; done'
          # Wait for RabbitMQ
          timeout 60 bash -c 'until nc -z localhost 5672; do sleep 1; done'
          # Wait for Redis
          timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done'
          echo "All services are ready!"
        
      - name: Run integration tests
        run: |
          export $(grep -v '^#' .env.test | grep -v '^$' | xargs)
          yarn test:integration --maxWorkers=2 --detectOpenHandles --forceExit

  # Parallel job for E2E tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

          
      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.yarn/cache
            ~/.yarn/berry/cache
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-
            ${{ runner.os }}-yarn-
            
      - name: Install dependencies
        run: yarn install --immutable
        
      - name: Set up test environment
        run: |
          cp env.test.example .env.test
          echo "NODE_ENV=test" >> $GITHUB_ENV
        
      - name: Run E2E tests with infrastructure
        run: ./scripts/test-e2e.sh

  # Build job (only runs after all tests pass)
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, integration-tests, e2e-tests]
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

          
      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.yarn/cache
            ~/.yarn/berry/cache
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-
            ${{ runner.os }}-yarn-
            
      - name: Install dependencies
        run: yarn install --immutable
        
      - name: Build applications
        run: yarn build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            apps/*/dist/
          retention-days: 7

  # Security scanning (parallel with build)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

          
      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.yarn/cache
            ~/.yarn/berry/cache
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-
            ${{ runner.os }}-yarn-
            
      - name: Install dependencies
        run: yarn install --immutable
        
      - name: Run security audit
        run: |
          echo "üîç Running security audit..."
          timeout 300 yarn audit --level moderate || {
            echo "‚ö†Ô∏è Security audit timed out or found issues"
            echo "üìã Audit summary:"
            yarn audit --level moderate --summary || true
            echo "‚ÑπÔ∏è Continuing with build - audit issues should be addressed separately"
          }
        continue-on-error: true
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          timeout: '10m'
        continue-on-error: true
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # Docker build (only runs after build and security pass)
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    timeout-minutes: 20
    
    strategy:
      matrix:
        service: [api, signals, producer]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-
            ${{ runner.os }}-buildx-
            
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.service }}/Dockerfile
          push: false
          tags: xrayiot/${{ matrix.service }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache