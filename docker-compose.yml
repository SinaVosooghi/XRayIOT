version: "3.9"
services:
  # Production Infrastructure
  mongo:
    image: mongo:7
    env_file:
      - .env.production
    ports: ["${MONGO_PORT:-27017}:27017"]
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DB:-iotp}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
    volumes:
      - mongo_data:/data/db
      - ../init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3

  # RabbitMQ
  rabbit:
    image: rabbitmq:3.12-management
    container_name: iot-docker-rabbit
    restart: unless-stopped
    env_file:
      - .env.production
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-password}
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbit_data:/var/lib/rabbitmq
      - ./config/rabbitmq-definitions.json:/etc/rabbitmq/definitions.json
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      sh -c "
        rabbitmq-server &
        sleep 10 &&
        rabbitmqctl import_definitions /etc/rabbitmq/definitions.json &&
        wait
      "

  redis:
    image: redis:7
    env_file:
      - .env.production
    ports: ["${REDIS_PORT:-6379}:6379"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Production Services
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    env_file:
      - .env.production
    ports: ["${API_PORT:-3000}:3000"]
    depends_on:
      mongo:
        condition: service_healthy
      rabbit:
        condition: service_healthy
      redis:
        condition: service_healthy

  signals:
    build:
      context: .
      dockerfile: apps/signals/Dockerfile
    env_file:
      - .env.production
    depends_on:
      mongo:
        condition: service_healthy
      rabbit:
        condition: service_healthy
      redis:
        condition: service_healthy
    stop_grace_period: 30s
    stop_signal: SIGTERM

  producer:
    build:
      context: .
      dockerfile: apps/producer/Dockerfile
    env_file:
      - .env.production
    ports: ["${PRODUCER_PORT:-3001}:3000"]
    depends_on:
      rabbit:
        condition: service_healthy

volumes:
  mongo_data:
  rabbit_data:
  redis_data:
